plugins {
    id 'com.github.johnrengelman.shadow'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven {
        name 'Xander Maven'
        url 'https://maven.isxander.dev/releases'
    }
    maven {
        name = "Terraformers"
        url = "https://maven.terraformersmc.com/"
    }
    maven {
        url "https://maven.nucleoid.xyz/"
        name "Nucleoid"
    }
    maven {
        url = "https://api.modrinth.com/maven"
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"

    modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version"

    modImplementation "dev.architectury:architectury-fabric:$rootProject.architectury_api_version"

    if (rootProject.hasProperty("yacl_version")) {
        modImplementation "dev.isxander:yet-another-config-lib:${project.yacl_version}+${rootProject.minecraft_version}-fabric"
    } else if(rootProject.hasProperty("midnightlib_version")) {
        if (rootProject.minecraft_version == "1.20.1") {
            modImplementation "maven.modrinth:midnightlib:1.4.1-fabric"
        } else {
            modImplementation "maven.modrinth:midnightlib:${project.midnightlib_version}-fabric"
        }
    } else {
        modImplementation("me.shedaniel.cloth:cloth-config-fabric:${cloth_version}") {
            exclude(group: "net.fabricmc.fabric-api")
        }
    }

    modImplementation("com.terraformersmc:modmenu:${rootProject.modmenu_version}")

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')
}

processResources {
    inputs.property 'version', project.version

    filesMatching('fabric.mod.json') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}
